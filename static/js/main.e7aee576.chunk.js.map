{"version":3,"sources":["Title.js","Map.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Map","state","infos","filteredInfos","markers","loadMap","loadingScript","window","initMap","_this","map","google","maps","document","getElementById","center","lat","lng","zoom","createDetails","getFoursquareInfos","axios","get","URLSearchParams","client_id","client_secret","query","near","v","then","response","setState","data","groups","items","catch","error","console","log","concat","alert","onchange","e","filter","place","venue","name","toLowerCase","includes","target","value","_this$state","info","infoWindow","InfoWindow","popupMessage","location","address","marker","Marker","position","id","title","animation","Animation","DROP","addListener","getAnimation","setAnimation","BOUNCE","setTimeout","setContent","open","push","listItemCheck","m","newMarker","this","_this2","aria-label","role","placeholder","onChange","src_Title","key","tabIndex","onClick","Component","url","getScript","getElementsByTagName","insertScript","src","async","defer","parentNode","insertBefore","onerror","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_Map","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wRAUeA,EARD,WACZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qDCqJSC,6MAlJbC,MAAQ,CACNC,MAAO,GACPC,cAAe,GACfC,QAAS,MAOXC,QAAU,WACRC,EAAc,yHACdC,OAAOC,QAAUC,EAAKD,WAGxBA,QAAU,WACR,IAAIE,EAAM,IAAIH,OAAOI,OAAOC,KAAKZ,IAAIa,SAASC,eAAe,OAAQ,CACnEC,OAAQ,CAACC,IAAK,UAAWC,KAAM,UAC/BC,KAAM,KAERT,EAAKU,cAAcT,MAIrBU,mBAAqB,WAUnBC,IAAMC,IATgB,gDASI,IAAIC,gBARL,CACvBC,UAAW,mDACXC,cAAe,mDACfC,MAAO,OACPC,KAAM,UACNC,EAAG,cAIFC,KAAK,SAAAC,GACJrB,EAAKsB,SAAS,CACZ7B,MAAO4B,EAASE,KAAKF,SAASG,OAAO,GAAGC,MACxC/B,cAAe2B,EAASE,KAAKF,SAASG,OAAO,GAAGC,OAC/CzB,EAAKJ,aAET8B,MAAM,SAAAC,GACLC,QAAQC,IAAR,mBAAAC,OAA+BH,IAC/BI,MAAK,6CAIXC,SAAW,SAAAC,GACT,IAAIhC,EAAM,IAAIH,OAAOI,OAAOC,KAAKZ,IAAIa,SAASC,eAAe,OAAQ,CACnEC,OAAQ,CAACC,IAAK,UAAWC,KAAM,UAC/BC,KAAM,KAGFf,EADYM,EAAKR,MAAfC,MACoByC,OAAO,SAAAC,GAEjC,OADAnC,EAAKU,cAAcT,GACZkC,EAAMC,MAAMC,KAAKC,cAAcC,SAASN,EAAEO,OAAOC,MAAMH,iBAEhEtC,EAAKsB,SAAS,CACZ5B,iBACC,WACDM,EAAKU,cAAcT,QAIvBS,cAAgB,SAACT,GAAQ,IAAAyC,EACY1C,EAAKR,MAAhCE,EADegD,EACfhD,cAAeC,EADA+C,EACA/C,QACvBD,EAAcO,IAAI,SAAA0C,GAChB,IAAIC,EAAa,IAAI9C,OAAOI,OAAOC,KAAK0C,WACpCC,EAAY,YAAAhB,OAAca,EAAKP,MAAMC,KAAzB,YAAAP,OAAwCa,EAAKP,MAAMW,SAASC,QAA5D,cACZC,EAAS,IAAInD,OAAOI,OAAOC,KAAK+C,OAAO,CACzCC,SAAU,CAAC5C,IAAKoC,EAAKP,MAAMW,SAASxC,IAAKC,IAAKmC,EAAKP,MAAMW,SAASvC,KAClEP,IAAKA,EACLmD,GAAIT,EAAKP,MAAMgB,GACfC,MAAOV,EAAKP,MAAMC,KAClBiB,UAAWxD,OAAOI,OAAOC,KAAKoD,UAAUC,OAE1CP,EAAOQ,YAAY,QAAS,WACI,OAA1BR,EAAOS,eACTT,EAAOU,aAAa,MAEpBV,EAAOU,aAAa7D,OAAOI,OAAOC,KAAKoD,UAAUK,QAEnDC,WAAW,WAAQZ,EAAOU,aAAa,OAAQ,MAC/Cf,EAAWkB,WAAWhB,GACtBF,EAAWmB,KAAK9D,EAAKgD,KAEvBtD,EAAQqE,KAAKf,QAKjBgB,cAAgB,SAAC9B,GAEFnC,EAAKR,MAAMG,QAAQuC,OAAO,SAAAgC,GAAC,OAAIA,EAAEd,KAAOjB,EAAMiB,KAAI,GAA/D,IAEInD,EAAM,IAAIH,OAAOI,OAAOC,KAAKZ,IAAIa,SAASC,eAAe,OAAQ,CACnEC,OAAQ,CAACC,IAAK4B,EAAMY,SAASxC,IAAKC,IAAK2B,EAAMY,SAASvC,KACtDC,KAAM,KAEJ0D,EAAY,IAAIrE,OAAOI,OAAOC,KAAK+C,OAAO,CAC5CC,SAAU,CAAC5C,IAAK4B,EAAMY,SAASxC,IAAKC,IAAK2B,EAAMY,SAASvC,KACxDP,IAAKA,EACLmD,GAAIjB,EAAMiB,GACVC,MAAOlB,EAAME,KACbiB,UAAWxD,OAAOI,OAAOC,KAAKoD,UAAUC,OAEtCZ,EAAa,IAAI9C,OAAOI,OAAOC,KAAK0C,WACpCC,EAAY,YAAAhB,OAAcK,EAAME,KAApB,YAAAP,OAAmCK,EAAMY,SAASC,QAAlD,cACiB,OAA7BmB,EAAUT,eACZS,EAAUR,aAAa,MAEvBQ,EAAUR,aAAa7D,OAAOI,OAAOC,KAAKoD,UAAUK,QAEtDC,WAAW,WAAQM,EAAUR,aAAa,OAAQ,MAClDf,EAAWkB,WAAWhB,GACtBF,EAAWmB,KAAK9D,EAAKkE,uFA5GrBC,KAAKzD,sDA+GE,IAAA0D,EAAAD,KACC1E,EAAkB0E,KAAK5E,MAAvBE,cACR,OACEP,EAAAC,EAAAC,cAAA,OAAK+D,GAAG,OACNjE,EAAAC,EAAAC,cAAA,OAAK+D,GAAG,gBAAgBkB,aAAW,gBAAgBC,KAAK,UACtDpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAO+D,GAAG,aAAaoB,YAAY,uBAAuBC,SAAUL,KAAKpC,aAG7E7C,EAAAC,EAAAC,cAACqF,EAAD,MACAvF,EAAAC,EAAAC,cAAA,QAAM+D,GAAG,iBACPjE,EAAAC,EAAAC,cAAA,OAAK+D,GAAG,OAAOkB,aAAW,cAAcC,KAAK,cAC3CpF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACXI,EAAcO,IAAI,SAAAkC,GAAK,OACtBhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYqF,IAAKxC,EAAMC,MAAMgB,GAAIwB,SAAS,IAAIC,QAAS,WAAQR,EAAKJ,cAAc9B,EAAMC,SACpGjD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAc6C,EAAMC,MAAMC,WAKhDlD,EAAAC,EAAAC,cAAA,OAAK+D,GAAG,MAAMkB,aAAW,cAAcC,KAAK,yBA7IpCO,aAuJZjF,EAAgB,SAAAkF,GACpB,IAAIC,EAAYlF,OAAOM,SAAS6E,qBAAqB,UAAU,GAC3DC,EAAepF,OAAOM,SAASf,cAAc,UACjD6F,EAAaC,IAAMJ,EACnBG,EAAaE,OAAQ,EACrBF,EAAaG,OAAQ,EACrBL,EAAUM,WAAWC,aAAaL,EAAcF,GAChDE,EAAaM,QAAU,kBAAMzD,MAAM,oDCxJ/B0D,EAAcC,QACW,cAA7B5F,OAAOiD,SAAS4C,UAEe,UAA7B7F,OAAOiD,SAAS4C,UAEhB7F,OAAOiD,SAAS4C,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1E,KAAK,SAAA+E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7G,QACfwG,UAAUC,cAAcO,YAI1B5E,QAAQC,IACN,iHAKEkE,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBvE,QAAQC,IAAI,sCAGRkE,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BzE,MAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,KC1FjEgF,IAASC,OAAOzH,EAAAC,EAAAC,cAACwH,EAAD,MAASzG,SAASC,eAAe,SDgB1C,SAAkB0F,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIc,IAAIC,oBAAwBjH,OAAOiD,SAASiE,MACpDC,SAAWnH,OAAOiD,SAASkE,OAIvC,OAGFnH,OAAOoH,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAhE,OAAMiF,oBAAN,sBAEPtB,GAgEV,SAAiCK,EAAOC,GAEtCoB,MAAMrB,GACH1E,KAAK,SAAAC,GAEJ,IAAM+F,EAAc/F,EAASgG,QAAQxG,IAAI,gBAEnB,MAApBQ,EAASiG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvB,UAAUC,cAAcuB,MAAMpG,KAAK,SAAA+E,GACjCA,EAAasB,aAAarG,KAAK,WAC7BtB,OAAOiD,SAAS2E,aAKpB7B,EAAgBC,EAAOC,KAG1BrE,MAAM,WACLE,QAAQC,IACN,mEArFA8F,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcuB,MAAMpG,KAAK,WACjCQ,QAAQC,IACN,gHAMJgE,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.e7aee576.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title-map\">Neighborhood Map</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title\r\n","import React, { Component } from 'react'\r\nimport Title from './Title'\r\nimport './css/searchfield.css'\r\nimport './css/map.css'\r\nimport axios from 'axios'\r\n\r\nclass Map extends Component {\r\n\r\n  state = {\r\n    infos: [],\r\n    filteredInfos: [],\r\n    markers: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getFoursquareInfos()\r\n  }\r\n\r\n  loadMap = () => {\r\n    loadingScript(\"https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyAxAPuxsvKt7MOcfU8yL-urFscW_11DHFM&callback=initMap\")\r\n    window.initMap = this.initMap\r\n  }\r\n\r\n  initMap = () => {\r\n    let map = new window.google.maps.Map(document.getElementById('map'), {\r\n      center: {lat: 43.643819, lng: -79.39779},\r\n      zoom: 11\r\n    })\r\n    this.createDetails(map)\r\n  }\r\n  /* Get Foursquare infos with Axios package */\r\n\r\n  getFoursquareInfos = () => {\r\n    const requestApiUrl = 'https://api.foursquare.com/v2/venues/explore?'\r\n    const parametersObject = {\r\n      client_id: 'CAQWSRVDV12J4R0F5JBNO124LWXBGBFZ2PF05FKWOW4N0Z0Z',\r\n      client_secret: 'AL4RFZAJBSCPWL5HJM2KUIJKHGKWHPTVJMDS12GWNJY4HYA2',\r\n      query: 'food',\r\n      near: 'toronto',\r\n      v: '20192707'\r\n    }\r\n\r\n    axios.get(requestApiUrl + new URLSearchParams(parametersObject))\r\n      .then(response => {\r\n        this.setState({\r\n          infos: response.data.response.groups[0].items,\r\n          filteredInfos: response.data.response.groups[0].items\r\n        }, this.loadMap())\r\n      })\r\n      .catch(error => {\r\n        console.log(`You got a error ${error}`)\r\n        alert(`Oh no! The map didn't load correctly`)\r\n      })\r\n  }\r\n\r\n  onchange = e => {\r\n    let map = new window.google.maps.Map(document.getElementById('map'), {\r\n      center: {lat: 43.643819, lng: -79.39779},\r\n      zoom: 11\r\n    })\r\n    const { infos } = this.state\r\n    const filteredInfos = infos.filter(place => {\r\n      this.createDetails(map)\r\n      return place.venue.name.toLowerCase().includes(e.target.value.toLowerCase())\r\n    })\r\n    this.setState({\r\n      filteredInfos\r\n    }, () => {\r\n      this.createDetails(map)\r\n    })\r\n  }\r\n\r\n  createDetails = (map) => {\r\n    const { filteredInfos, markers } = this.state\r\n    filteredInfos.map(info => {\r\n      let infoWindow = new window.google.maps.InfoWindow()\r\n      let popupMessage =`<div><h3>${info.venue.name}</h3><p>${info.venue.location.address}</p></div>`\r\n      let marker = new window.google.maps.Marker({\r\n        position: {lat: info.venue.location.lat, lng: info.venue.location.lng},\r\n        map: map,\r\n        id: info.venue.id,\r\n        title: info.venue.name,\r\n        animation: window.google.maps.Animation.DROP\r\n      })\r\n      marker.addListener('click', function() {\r\n        if (marker.getAnimation() !== null) {\r\n          marker.setAnimation(null)\r\n        } else {\r\n          marker.setAnimation(window.google.maps.Animation.BOUNCE)\r\n        }\r\n        setTimeout(() => { marker.setAnimation(null)}, 1500)\r\n        infoWindow.setContent(popupMessage)\r\n        infoWindow.open(map, marker)\r\n      })\r\n      markers.push(marker)\r\n    })\r\n  }\r\n\r\n  /* A method that opens the infowindow in map when a element is clicked on list */\r\n  listItemCheck = (place) => {\r\n    // Check if the marker id match the place id\r\n    let marker = this.state.markers.filter(m => m.id === place.id)[0]\r\n\r\n    let map = new window.google.maps.Map(document.getElementById('map'), {\r\n      center: {lat: place.location.lat, lng: place.location.lng},\r\n      zoom: 11\r\n    })\r\n    let newMarker = new window.google.maps.Marker({\r\n      position: {lat: place.location.lat, lng: place.location.lng},\r\n      map: map,\r\n      id: place.id,\r\n      title: place.name,\r\n      animation: window.google.maps.Animation.DROP\r\n    })\r\n    let infoWindow = new window.google.maps.InfoWindow()\r\n    let popupMessage =`<div><h3>${place.name}</h3><p>${place.location.address}</p></div>`\r\n    if (newMarker.getAnimation() !== null) {\r\n      newMarker.setAnimation(null)\r\n    } else {\r\n      newMarker.setAnimation(window.google.maps.Animation.BOUNCE)\r\n    }\r\n    setTimeout(() => { newMarker.setAnimation(null)}, 1500)\r\n    infoWindow.setContent(popupMessage)\r\n    infoWindow.open(map, newMarker)\r\n  }\r\n\r\n  render() {\r\n    const { filteredInfos } = this.state\r\n    return (\r\n      <div id=\"app\">\r\n        <nav id=\"header-search\" aria-label=\"Search in Map\" role=\"search\">\r\n          <div className=\"search-field\">\r\n            <input id=\"search-bar\" placeholder=\"Search for places...\" onChange={this.onchange}/>\r\n          </div>\r\n        </nav>\r\n        <Title />\r\n        <main id=\"map-container\">\r\n          <div id=\"list\" aria-label=\"Places List\" role=\"navigation\">\r\n            <h3 className=\"subtitle-map\">Places List</h3>\r\n            <ul className=\"places-list\">\r\n              {filteredInfos.map(place => (\r\n                <li className=\"list-item\" key={place.venue.id} tabIndex=\"0\" onClick={() => { this.listItemCheck(place.venue) } }>\r\n                  <h4 className=\"place-name\">{place.venue.name}</h4>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div id=\"map\" aria-label=\"Toronto Map\" role=\"application\"></div>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map\r\n\r\n/* Adding the script tag in HTML */\r\nconst loadingScript = url => {\r\n  let getScript = window.document.getElementsByTagName('script')[0]\r\n  let insertScript = window.document.createElement('script')\r\n  insertScript.src = url\r\n  insertScript.async = true\r\n  insertScript.defer = true\r\n  getScript.parentNode.insertBefore(insertScript, getScript)\r\n  insertScript.onerror = () => alert('Oh no! Google Maps API request catch an error.')\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Map from './Map';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Map />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}